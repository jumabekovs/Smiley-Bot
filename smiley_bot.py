import asyncio
import json
import aioschedule
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from decouple import config

loop = asyncio.get_event_loop()
API_TOKEN = config("TOKEN")
bot = Bot(token=API_TOKEN, loop=loop, parse_mode=types.ParseMode.HTML)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

keyboard = InlineKeyboardMarkup()
smile_1 = InlineKeyboardButton(text="üòÅüëç", callback_data="smile_1")
smile_2 = InlineKeyboardButton(text="üôÇüëå", callback_data="smile_2")
smile_3 = InlineKeyboardButton(text="üò°üëé", callback_data="smile_3")

keyboard.add(smile_1, smile_2, smile_3)


@dp.message_handler(commands=['start'])
async def get_started(message: types.Message):
    chat_id = str(message.chat.id)
    entry = {"chat_id": chat_id}

    with open("chat_id.json", "r+") as f:
        data = json.load(f)
        if entry not in data:
            data.append(entry)
        f.seek(0)
        json.dump(data, f)

    await message.answer(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã –Ω–∞—à–∏—Ö –∫—É—Ä—å–µ—Ä–æ–≤.',
        reply_markup=keyboard)


@dp.callback_query_handler(text_contains='smile_')
async def smile(call: types.CallbackQuery):
    if call.data and call.data.startswith("smile_"):
        code = call.data[-1:]
        if code.isdigit():
            code = int(code)
        if code == 1:
            await call.message.edit_text(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!')
        if code == 2:
            await call.message.edit_text('–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è –ª—É—á—à–µ.')
        if code == 3:
            await call.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ç–æ –∏–∑ –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–∞—Ä—É—à–∏–ª —Ä–µ–≥–ª–∞–º–µ–Ω—Ç.')
        else:
            await bot.answer_callback_query(call.id)


@dp.message_handler()
async def send_to_us(message: types.Message):
    chat_id = str(message.chat.id)
    entry = {"chat_id": chat_id}
    with open("info.json", "r+") as f:
        data = json.load(f)
        try:
            if entry not in data:
                await message.bot.send_message(-590906679, f"{message.from_user.first_name} –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ {message.text}")
                await message.answer("–°–ø–∞—Å–∏–±–æ —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è!")
                data.append(entry)
                f.seek(0)
                json.dump(data, f)
            else:
                await message.answer("–°–ø–∞—Å–∏–±–æ, –Ω–æ —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—Å!")
        except Exception as e:
            print(e)


async def notify():
    try:
        with open("chat_id.json") as f:
            data = json.load(f)
        for i in data:
            await bot.send_message(i["chat_id"], "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start",
                                   parse_mode='markdown')
    except Exception as e:
        print(e)


async def clear_json():
    with open("info.json", "w") as f:
        json.dump([], f)


async def scheduler():
    try:
        aioschedule.every().day.at("03:00").do(clear_json)
        aioschedule.every().day.at("19:00").do(notify)
        while True:
            await aioschedule.run_pending()
            await asyncio.sleep(1)
    except Exception as e:
        print(e)


async def on_startup(_):
    try:
        asyncio.create_task(scheduler())
    except Exception as e:
        print(e)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
